import ShiftData from "../db/models/ShiftData";
import Child from "../db/models/Child";
import Registration from "../db/models/Registration";

const { generateAllCards, generateOneCard } = require("./dataCardGenerator");

const exists = async (model, entryId) => {
  const entry = await model.findByPk(entryId);
  return !!entry;
};

const addCamper = async (shiftNr: number, childId: number) => {
  try {
    await ShiftData.findOrCreate({
      where: { shiftNr, childId },
    });
    return true;
  } catch (err) {
    console.log(err);
    return false;
  }
};

const editNotes = async (childId: number, notes: string) => {
  if (!(await exists(Child, childId))) return false;
  try {
    await Child.update({ notes }, { where: { id: childId } });
    return true;
  } catch (e) {
    console.log(e);
    return false;
  }
};

const editTent = async (entryId, tentNr) => {
  if (!(await exists(ShiftData, entryId))) return false;
  try {
    if (tentNr === 0) tentNr = null;
    await ShiftData.update({ tentNr }, { where: { id: entryId } });
    return true;
  } catch (e) {
    console.log(e);
    return false;
  }
};

exports.addAll = async (req, res) => {
  const campers = await Registration.findAll({
    where: { isRegistered: true },
  });

  campers.forEach((camper) => addCamper(camper["shift"], camper["name"]));
  res.status(200).end();
};

// === Internal API for the router. ===

exports.addCamper = async (req, res) => {
  if (await addCamper(req.body.shift, req.body.name)) res.status(201).end();
  else res.status(400).end();
};

exports.updateNotes = async (childId, notes) => {
  return await editNotes(childId, notes);
};

exports.updateTent = async (entryId, tentNr) => {
  return await editTent(entryId, tentNr);
};

// Fetch information about tent rosters.
// Return an array of tent rosters and an array of kids without tents.
// Tent rosters are arrays of tent member objects.
exports.getTents = async (shiftNr: number) => {
  let tentData;

  // Get all tent member entries for the given shift.
  try {
    tentData = await ShiftData.findAll({ where: { shiftNr: shiftNr } });
    if (!tentData) return null;
  } catch (e) {
    console.error(e);
    return null;
  }

  // Create and initialise the return object.
  const resObj = { tents: [], noTent: [] };
  for (let i = 0; i < 10; ++i) resObj.tents[i] = [];

  // Store the promises generated by async DB calls.
  const fetchPromises = [];

  // Flag errors within the async wrapper function.
  let error = false;

  // Fetch the child associated with a tent member entry
  // and populate the return object.
  const handleChild = async (tentEntry) => {
    let child;

    try {
      child = await tentEntry.getChild();
    } catch (e) {
      console.error(e);
      error = true;
      return;
    }

    const tentNr = tentEntry.tentNr;

    if (tentNr)
      resObj.tents[tentNr - 1].push({
        id: tentEntry.id,
        name: child.name,
        isPresent: tentEntry.isPresent,
      });
    else resObj.noTent.push({ id: tentEntry.id, name: child.name });
  };

  tentData.forEach((tentEntry) => {
    if (!error) fetchPromises.push(handleChild(tentEntry));
  });

  await Promise.all(fetchPromises);

  if (error) return null;
  return resObj;
};

exports.updatePresence = async (id) => {
  let child;
  try {
    child = await ShiftData.findByPk(id);
    if (!child) return false;
    child.isPresent = !child.isPresent;
    child.save();
  } catch (e) {
    console.error(e);
    return false;
  }

  return true;
};

exports.fetchCamperNote = async (shiftNr: number, id: number) => {
  const camperId: number = (await Child.findByPk(id)).id;
  if (!camperId) return null;

  const camper = await Registration.findOne({
    where: {
      isRegistered: true,
      childId: camperId,
    },
  });

  return await generateOneCard(shiftNr, camper);
};

exports.fetchAllNotes = async (shiftNr) => {
  let campers;
  if (shiftNr === 2) {
    campers = await Registration.findAll({
      where: { isRegistered: true },
      order: [["name", "ASC"]],
    });
  } else {
    campers = await Registration.findAll({
      where: { isRegistered: true, shiftNr },
      order: [["name", "ASC"]],
    });
  }

  return await generateAllCards(shiftNr, campers);
};
